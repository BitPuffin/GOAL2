/* code that might get turned into tests later on if I add a test suite */
/* for now that's not much of a concern                                 */


/* testing the add instruction for the unsafevm */
void test_add() {
	struct unsafevm vm = {};
	struct instruction adds[3] =
		{
			{
				OP_ADD_INT,
				2,
				{ { MODE_REG, REG_0 }, { MODE_REG, REG_2 } }
			},
			{
				OP_ADD_INT,
				2,
				{ { MODE_REG, REG_0 }, { MODE_REG, REG_2 } }
			},
			{
				OP_ADD_INT,
				2,
				{ { MODE_REG, REG_0 }, { MODE_REG, REG_2 } }
			}
		};
	vm.registers[REG_0] = 15;
	vm.registers[REG_2] = 17;
	vm.iptr = adds;
	printf("before: {r0: %d} {r2: %d}\n",
	       (int) vm.registers[REG_0],
	       (int) vm.registers[REG_2]);

	advance_instruction(&vm);

	printf("after:  {r0: %d} {r2: %d}\n",
	       (int) vm.registers[REG_0],
	       (int) vm.registers[REG_2]);
	vm.registers[REG_0] = 1;
	advance_instruction(&vm);

	printf("after:  {r0: %d} {r2: %d}\n",
	       (int) vm.registers[REG_0],
	       (int) vm.registers[REG_2]);
	vm.registers[REG_0] = 2;
	advance_instruction(&vm);

	printf("after:  {r0: %d} {r2: %d}\n",
	       (int) vm.registers[REG_0],
	       (int) vm.registers[REG_2]);
}



/* test push instruction */
/* sp, spa, sv were      */
/* checked in debugger   */
void test_push() {
	struct unsafevm vm = inituvm();
	struct instruction i = {
		OPC_PUSH,
		1,
		{ MODE_REG, REG_0 }
	};
	vm.registers[REG_0] = 1337;
	u64 sp = vm.registers[REG_SP];
	vm.iptr = &i;
	advance_instruction(&vm);
	u64 spa = vm.registers[REG_SP];
	u64 *sv = (u64 *)spa;
	
	destroyvm(vm);
}


/* test the pop instruction */
void test_pop()
{
	struct unsafevm vm = mkuvm();
	u64 *stack = (u64 *)vm.registers[REG_SP];
	stack--;
	vm.registers[REG_SP] = (u64)stack;
	*stack = 1337;

	struct instruction i = {
		OPC_POP,
		1,
		{ MODE_REG, REG_0 }
	};
	vm.iptr = &i;
	advance_instruction(&vm);

	u64 r0 = vm.registers[REG_0];
	destroyuvm(vm);
}


void test_call()
{
	struct instruction ins[] = {
		{
			OPC_CALL,
			{ { MODE_REG, REG_0 } },
		},
	};
	struct unsafevm vm = mkuvm();

	vm.iptr = ins;
	i64 offset = -800;
	vm.registers[REG_0] = offset;

	struct instruction *ibefore = vm.iptr;
	ibefore++;

	advance_instruction(&vm);

	struct instruction *i = vm.iptr;
	i64 off = ibefore - i;
	u64 p = pop(&vm);
	u64 pb = (u64)ins;

	destroyuvm(vm);
}

void test_direct_value()
{
	struct unsafevm vm = mkuvm();
	struct instruction i = {
		OPC_ADD_INT,
		{
			{
				MODE_DIRECT,
				0,
				0,
				123
			},
			{
				MODE_REG,
				REG_0
			}
		}
	};
	vm.iptr = &i;

	advance_instruction(&vm);

	u64 r0 = vm.registers[REG_0];

	destroyuvm(vm);
}



void _print_number(i64 num);
void test_call_c_void()
{
	struct unsafevm vm = mkuvm();
	struct instruction instructions[] = {
		{
			OPC_C_INT_ARG,
			{
				{ MODE_REG, REG_0, 0, 0 }
			}
		},
		{
			OPC_CALL_C_VOID,
			{
				{ MODE_REG, REG_8, 0, 0 }
			}
		}
	};
	vm.iptr = instructions;
	vm.registers[REG_0] = (u64)1337;
	vm.registers[REG_8] = (u64)_print_number;

	advance_instruction(&vm);
	advance_instruction(&vm);
}

#include <stdio.h>

void _print_number(i64 num)
{
	printf("%ld", num);
}
